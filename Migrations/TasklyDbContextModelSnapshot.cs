// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Taskly.Data;

#nullable disable

namespace Taskly.Migrations
{
    [DbContext(typeof(TasklyDbContext))]
    partial class TasklyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be06cc60-9824-41a5-bf8d-413ca9570ece",
                            Email = "AngRod@icloud.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL3NlbjKvSwr7gHXoUbPwJpXN/yM/CwJvzwzwGcixqBIhwOAjCkd5oSm/naQdvTYxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b03a622-9fac-4a10-a5d6-f01dec93372b",
                            TwoFactorEnabled = false,
                            UserName = "AngRod"
                        },
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916bb6g",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "929b606a-13fc-4631-91b9-36a0d65d7bde",
                            Email = "Jramirez@icloud.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECTrvsiidOU8Zf056zJLee2RaOFpHgL50+WMzUigKlRsWIIr07xysKEiFbNHdr/XTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4bf1f2d-bc23-477f-b0f3-5563a9ab9360",
                            TwoFactorEnabled = false,
                            UserName = "JRamirez"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Taskly.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Work"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Personal"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Hobby"
                        });
                });

            modelBuilder.Entity("Taskly.Models.TaskCategories", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("TaskId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TaskCategories");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            TaskId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            TaskId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 10,
                            CategoryId = 1
                        },
                        new
                        {
                            TaskId = 11,
                            CategoryId = 2
                        },
                        new
                        {
                            TaskId = 12,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("Taskly.Models.TaskObj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompletedTask")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsImportantTask")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4540),
                            Description = "Create a responsive landing page for the website.",
                            IsImportantTask = true,
                            Title = "Develop Landing Page",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4590),
                            Description = "Resolve the issue with the user authentication module.",
                            IsImportantTask = false,
                            Title = "Fix Backend Bug",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4600),
                            Description = "Pick up friend at 7am to get to the marathon on time",
                            IsImportantTask = true,
                            Title = "Nashville Marathon",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CompletedTask = true,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4600),
                            Description = "Take Dogs to groomers at 11am",
                            IsImportantTask = false,
                            Title = "Dogs",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4600),
                            Description = "Pick up son from moms house",
                            IsImportantTask = true,
                            Title = "Pick up son",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4610),
                            Description = "Vacuum and dust all rooms.",
                            IsImportantTask = false,
                            Title = "Clean the House",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4610),
                            Description = "Buy groceries for the week.",
                            IsImportantTask = true,
                            Title = "Grocery Shopping",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CompletedTask = true,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4610),
                            Description = "Help son with his math homework.",
                            IsImportantTask = false,
                            Title = "Son's Homework",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4620),
                            Description = "Prepare a special family dinner.",
                            IsImportantTask = true,
                            Title = "Family Dinner",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CompletedTask = true,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4620),
                            Description = "Respond to work emails",
                            IsImportantTask = true,
                            Title = "Work Emails ",
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            CompletedTask = false,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4620),
                            Description = "Do the laundry for the week.",
                            IsImportantTask = true,
                            Title = "Laundry",
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            CompletedTask = true,
                            Date = new DateTime(2024, 6, 14, 9, 42, 9, 803, DateTimeKind.Local).AddTicks(4630),
                            Description = "Meet Jose at Avenue for morning run",
                            IsImportantTask = false,
                            Title = "Morning Run",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Taskly.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Angie",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Rodriguez"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lothric way",
                            FirstName = "Jose",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916bb6g",
                            LastName = "Ramirez"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taskly.Models.TaskCategories", b =>
                {
                    b.HasOne("Taskly.Models.Category", "Category")
                        .WithMany("TaskCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Models.TaskObj", "TaskObj")
                        .WithMany("TaskCategories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TaskObj");
                });

            modelBuilder.Entity("Taskly.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Taskly.Models.Category", b =>
                {
                    b.Navigation("TaskCategories");
                });

            modelBuilder.Entity("Taskly.Models.TaskObj", b =>
                {
                    b.Navigation("TaskCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
